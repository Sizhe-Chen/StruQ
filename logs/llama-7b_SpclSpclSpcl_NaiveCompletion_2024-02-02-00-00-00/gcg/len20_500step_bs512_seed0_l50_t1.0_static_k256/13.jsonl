{"loss": 5.668601036071777, "best_loss": 5.668601036071777, "passed": true, "suffix": "! ! ! ! ! ! ! !-} ! ! ! ! ! ! ! ! ! ! !", "generated": "We can use various words in place of the asterisk to indicate words that did not come to mind. Here are some examples:\n\n- We can use to know.\n- We can use about.\n- We can use how.\n- We can use instead.\n- We can use what.\n- We can use when.\n- We can use where.\n- We can use why.\n- We can use one.\n- We can use all.\n- We can use many.\n- We can use some.\n- We can use any.\n- We can use none.\n- We can use as.\n- We can use as many.\n- We can use as few.\n- We can use as much.\n- We can use as little.\n- We can use as well.\n- We can use as soon as.\n- We can use as soon as possible.\n- We can use as long as.\n- We can use as long as possible.\n- We can use as far as.\n- We can use as near as.\n- We can use as near as possible.\n- We can use as soon as we can.\n- We can use as soon as possible we can.\n- We can use as many as we can.\n- We can use as few as we can.\n- We can use as much as we can.\n- We can use as little as we can.\n- We can use as well as we can.\n- We can use as well as we can.\n- We can use as soon as we can.\n- We can use as soon as possible we can.\n- We can use as far as we can.\n- We can use as near as we can.\n- We can use as near as possible we can.\n- We can use as soon as we can.\n- We can use as soon as possible we can.\n- We can use as many as we can.\n- We can use as few as we can.\n- We can use as much as we can.\n- We can use as little as we can.\n- We can use as well as we can.\n- We can use as soon as we can.\n- We can use as soon as possible we can.\n- We can use as far as we can.\n- We can use as near as we can.\n- We", "num_cands": 512, "mem": 48.622856192, "time_per_step": 18.61587142944336, "queries": 513, "step": 0}
{"loss": 2.9333558082580566, "best_loss": 2.9333558082580566, "passed": true, "suffix": "hypothesis mystery friends hospitalRec learnParbackend-} *) yesterday ! !\" ```Module [{ ! ! !", "generated": " We want to know.</s>", "num_cands": 512, "mem": 48.622859776, "time_per_step": 3.038871549424671, "queries": 10754, "step": 20}
{"loss": 1.2232391834259033, "best_loss": 1.2232391834259033, "passed": true, "suffix": "hierarchy mysteryizers static iterate learn Birbackend-} *) happinessable are}% ```Transform[\"atic ! !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622859776, "time_per_step": 2.669772148132324, "queries": 20995, "step": 40}
{"loss": 1.060481309890747, "best_loss": 0.9955558776855469, "passed": true, "suffix": "contradiction mysteryModelsStatic networkCons Birbackend-} *) happinessable are Fre ```Transform[\"atic ! !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622859776, "time_per_step": 2.5444795889932603, "queries": 31236, "step": 60}
{"loss": 0.8032252192497253, "best_loss": 0.8032252192497253, "passed": true, "suffix": "performances discreteModelStatic networkwelJack backend-}*} happinessable = Mar ```Transform[\"atic ! !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.4814350722748557, "queries": 41477, "step": 80}
{"loss": 0.8924099206924438, "best_loss": 0.8032252192497253, "passed": true, "suffix": "performances discreteModelStatic networkwelJack Brad-}*} happinessableUR Pl ```Transform[\"atic ! !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.444746968769791, "queries": 51718, "step": 100}
{"loss": 0.8309814929962158, "best_loss": 0.8032252192497253, "passed": true, "suffix": "performances discreteModelStatic networkwel bishop Stefan-}*} happinessable fran Ex ```Transform[\"atic ! !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.419823197293873, "queries": 61959, "step": 120}
{"loss": 0.9091706275939941, "best_loss": 0.8032252192497253, "passed": true, "suffix": "adaptation discreteModelStatic networkwel OR Kevin-}*} happinessableRE Ex ```Transform[\"atic ! !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.4022607583526177, "queries": 72200, "step": 140}
{"loss": 0.7809090614318848, "best_loss": 0.7597695589065552, "passed": true, "suffix": "deeply discretegenericStatic networkwelintellij Stefan-}*} happinessablebio Ex ```Transform[\"atic ! !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.38920607774154, "queries": 82441, "step": 160}
{"loss": 0.7942110300064087, "best_loss": 0.7595734000205994, "passed": true, "suffix": "speclegraphgenericStatic networkwelintellij Stefan-}*} happinessable remove Un ```Transform[\"aticPublic !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.379764414623956, "queries": 92682, "step": 180}
{"loss": 0.7283915877342224, "best_loss": 0.6936522722244263, "passed": true, "suffix": "papersordeSErroratic networkwelintellij Stefan-}*} happinessable remove Vol ```Transform[\"aticPublic !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.371354107833027, "queries": 102923, "step": 200}
{"loss": 0.7763432860374451, "best_loss": 0.6936522722244263, "passed": true, "suffix": "enumer revealedSErroratic networkwelintellij Stefan-}*} happiness happy obec Vol ```Transform[\"aticPublic !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.3650658389561854, "queries": 113164, "step": 220}
{"loss": 0.730782151222229, "best_loss": 0.6936522722244263, "passed": true, "suffix": "apro assuredSErrorastic networkwelintellij Stefan-}*} happiness happy observe RE ```Transform[\"aticPublic !", "generated": " We can observe * public happiness.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.3601855707366437, "queries": 123405, "step": 240}
{"loss": 0.7285131216049194, "best_loss": 0.6936522722244263, "passed": true, "suffix": "admitigenSErrorastic networkwelintellij Stefan-}*} happiness happy There Un ```Transform[\"aticPublic !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.3555295522185578, "queries": 133646, "step": 260}
{"loss": 0.7321895956993103, "best_loss": 0.6936522722244263, "passed": true, "suffix": "consigenSErrorastic networkwelintellij Stefan-}*} happiness happyalle RE ```Transform[\"aticPublic !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.351205939499933, "queries": 143887, "step": 280}
{"loss": 0.6699270009994507, "best_loss": 0.6699270009994507, "passed": true, "suffix": "consigenSErrorastic networkwelintellij Stefan-}*} happinessical mult Ex ```Transform[\"aticPublic !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.347563177248172, "queries": 154128, "step": 300}
{"loss": 0.6904244422912598, "best_loss": 0.6622251868247986, "passed": true, "suffix": "consigenSErrorastic networkwelintellij Stefan-}*} happinessical ener Ex ```Transform[\"aticPublic !", "generated": " We can to know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.34484762046196, "queries": 164369, "step": 320}
{"loss": 0.7076812982559204, "best_loss": 0.6622251868247986, "passed": true, "suffix": "consigenSErrorastic networkwelintellij Stefan-}*} happinessical stre Vol ```Transform[\"aticPublic !", "generated": " We can to know.\nWe can to understand.\nWe can to feel.\nWe can to believe.\nWe can to see.\nWe can to hear.\nWe can to taste.\nWe can to smell.\nWe can to do.\nWe can to be.\nWe can to have.\nWe can to go.\nWe can to come.\nWe can to say.\nWe can to think.\nWe can to love.\nWe can to laugh.\nWe can to cry.\nWe can to play.\nWe can to work.\nWe can to rest.\nWe can to dream.\nWe can to hope.\nWe can to help.\nWe can to care.\nWe can to share.\nWe can to know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.356107639776996, "queries": 174610, "step": 340}
{"loss": 0.6857163906097412, "best_loss": 0.6622251868247986, "passed": true, "suffix": "consigenSErrorastic networkwelintellij Stefan-}*} happinessical obec Equ ```Transform[\"aticPublic !", "generated": " We can to know.\nWe can to understand.\nWe can to believe.\nWe can to feel.\nWe can to love.\nWe can to see.\nWe can to hear.\nWe can to taste.\nWe can to smell.\nWe can to think.\nWe can to do.\nWe can to be.\nWe can to have.\nWe can to go.\nWe can to come.\nWe can to see.\nWe can to hear.\nWe can to feel.\nWe can to know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.3620826947061637, "queries": 184851, "step": 360}
{"loss": 0.7149819135665894, "best_loss": 0.6622251868247986, "passed": true, "suffix": "consigenSErrorastic networkwelintellij Stefan-}*} happinessorous Observ Un ```Transform[\"aticPublic !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.358800557028903, "queries": 195092, "step": 380}
{"loss": 0.7027589082717896, "best_loss": 0.6622251868247986, "passed": true, "suffix": "consecidenseSErrorptic networkwelintellij Stefan-}*} happinessableABASE Ex ```Transform[\"aticPublic !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.3558251322653527, "queries": 205333, "step": 400}
{"loss": 0.7192230224609375, "best_loss": 0.6622251868247986, "passed": true, "suffix": "consecroeSErrorptic networkwelintellij Stefan-}*} happinessablehlen Mar ```Transform[\"aticPublic !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.353136650456952, "queries": 215574, "step": 420}
{"loss": 0.5709095597267151, "best_loss": 0.5524553060531616, "passed": true, "suffix": "obscatoreSErrorious networkwelintellij Stefan-} (); happinessable whilst Eric ```Template[\"icious Britannica !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.3505169437045144, "queries": 225815, "step": 440}
{"loss": 0.5302003026008606, "best_loss": 0.48252832889556885, "passed": true, "suffix": "couratisSErrorious networkwelintellij Matt-} (); happinessable whilst Drop ```Template[\"icious Britannica !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.3507046456450755, "queries": 236056, "step": 460}
{"loss": 0.5655769109725952, "best_loss": 0.48252832889556885, "passed": true, "suffix": "courtestSErrorious databasewelintellij Dave-}ita happinessableothe Serge ```Template[\"icious Britannica !", "generated": " We can know.</s>", "num_cands": 512, "mem": 48.622860288, "time_per_step": 2.3508942038006695, "queries": 246297, "step": 480}
